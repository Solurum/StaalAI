name: NuGet Solution
permissions: write-all
on:
  push:
    branches:
      - '**'
    tags:
      - "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+.[0-9]+-**"
      - "[0-9]+.[0-9]+.[0-9]+-**"
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  validate_quality_gate:
    name: Quality Gate
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install NuGetToggleOnBuild
        run: dotnet tool install Skyline.DataMiner.CICD.Tools.NuGetToggleOnBuild --global

      - name: Install NuGetPreBuildApplyBranchOrTag
        run: dotnet tool install Skyline.DataMiner.CICD.Tools.NuGetPreBuildApplyBranchOrTag --global

      - name: Find .sln file
        id: findSlnFile
        shell: bash
        run: |
          if [[ -z "${SOLUTION_NAME}" ]]; then
            sln="$(find . -type f -name '*.sln' | sort -r | head -n 1)"
          else
            sln="$(find . -type f -name "${SOLUTION_NAME}")"
          fi
          if [[ -z "$sln" ]]; then
            echo "No solution (.sln) file found." >&2
            exit 1
          fi
          echo "solutionFilePath=$sln" >> "$GITHUB_OUTPUT"

      - name: Apply Branch and output path for pre-release NuGet
        if: github.ref_type == 'branch'
        run: NuGetPreBuildApplyBranchOrTag --workspace "${{ github.workspace }}" --tag " " --branch "${{ github.ref_name }}" --build "${{ github.run_number }}" --nugetResultFolder "${{ github.workspace }}/_NuGetResults" --solution-filepath "${{ steps.findSlnFile.outputs.solutionFilePath }}"

      - name: Apply Tag and output path for Release NuGet
        if: github.ref_type == 'tag'
        run: NuGetPreBuildApplyBranchOrTag --workspace "${{ github.workspace }}" --tag "${{ github.ref_name }}" --branch " " --build "${{ github.run_number }}" --nugetResultFolder "${{ github.workspace }}/_NuGetResults" --solution-filepath "${{ steps.findSlnFile.outputs.solutionFilePath }}"

      - name: Build
        run: dotnet build "${{ steps.findSlnFile.outputs.solutionFilePath }}" --configuration Release -nodeReuse:false

      - name: Upload NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: NuGetResults
          path: "${{ github.workspace }}/_NuGetResults"

      - name: Disable NuGet Creation on Subsequent Builds
        run: NuGetToggleOnBuild --setToActive false --workspace "${{ github.workspace }}" --onlyOnConfiguredNuGet false --solution-filepath "${{ steps.findSlnFile.outputs.solutionFilePath }}"

      - name: Unit Tests
        id: unit-tests
        run: dotnet test "${{ steps.findSlnFile.outputs.solutionFilePath }}" --filter TestCategory!=IntegrationTest --logger "trx;logfilename=unitTestResults.trx" --collect "XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
        continue-on-error: true

      - name: Prepare SonarCloud Variables
        id: prepSonarCloudVar
        run: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
               myfile.write("lowerCaseOwner=" + str.lower("${{ github.repository_owner }}"))
        shell: python

      - name: Get SonarCloud Status
        id: get-sonarcloud-status
        shell: bash
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_NAME: ${{ vars.SONAR_NAME }}
        run: |
          if [[ -z "${SONAR_NAME}" ]]; then
            echo "Missing repository variable SONAR_NAME" >&2
            exit 0
          fi
          resp="$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${SONAR_NAME}" || true)"
          echo "sonarCloudProjectStatus=$resp" >> "$GITHUB_OUTPUT"

      - name: Trigger Initial Analysis
        if: fromJson(steps.get-sonarcloud-status.outputs.sonarCloudProjectStatus).projectStatus.status  == 'NONE'
        uses: sonarsource/sonarqube-scan-action@v5.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # needed for PR decoration
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_NAME }}
            -Dsonar.organization=${{ env.lowerCaseOwner }}
        continue-on-error: true

         # Triggering SonarCloud analysis as results of it are required by Quality Gate check.
      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@v5.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # needed for PR decoration
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_NAME }}
            -Dsonar.organization=${{ env.lowerCaseOwner }}
      
      # Check the Quality Gate status.
      - name: SonarCloud Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@v1.2.0
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN:   ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
          
      - name: Quality Gate
        id: quality-step
        shell: python
        run: |
          failed = False
          reasons = []
          if "${{ steps.unit-tests.outcome }}" == "failure":
              failed = True
              reasons.append("- Test failures")
          if "${{ steps.sonarcloud-quality-gate-check.outcome }}" == "failure":
              failed = True
              reasons.append("- Could not retrieve SonarCloud quality gate status")
          if "${{ steps.sonarcloud-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
              failed = True
              reasons.append("- Code analysis quality gate failed")
          if failed:
              print("Quality gate failed due to:")
              for r in reasons:
                  print(r)
              exit(1)

  push:
    # Only run this job when the ref is a tag (and the workflow only triggers for semver-like tags)
    if: startsWith(github.ref, 'refs/tags/')
    name: Push to NuGet.org
    runs-on: ubuntu-latest
    needs: validate_quality_gate
    steps:
      - name: Download NuGet artifacts
        uses: actions/download-artifact@v4
        with:
          name: NuGetResults
          path: _NuGetResults

      - name: Find NuGet packages
        id: findcreatednuget
        shell: bash
        run: |
          mapfile -t files < <(find _NuGetResults -type f -name '*.nupkg')
          if [[ ${#files[@]} -eq 0 ]]; then
            echo "No .nupkg files found in _NuGetResults" >&2
            exit 1
          fi
          printf 'nugetPackageName=%s\n' "${files[*]}" >> "$GITHUB_OUTPUT"

      - name: Push to NuGet.org
        shell: bash
        env:
          NUGET_API_KEY: ${{ secrets.nugetApiKey }}
        run: |
          IFS=$'\n'
          for pkg in ${{ steps.findcreatednuget.outputs.nugetPackageName }}; do
            dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json
          done
          unset IFS
